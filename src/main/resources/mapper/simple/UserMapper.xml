<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.basicit.mapper.auth.UserMapper">

    <resultMap id="userMap" type="com.basicit.model.auth.User">
        <result column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="true_name" property="trueName"/>
        <result column="password" property="password"/>
        <result column="salt" property="salt"/>
        <result column="phone_num" property="phoneNum"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="modify_time" property="modifyTime"/>
    </resultMap>

    <resultMap id="userDTOMap" type="com.basicit.model.auth.UserDTO" extends="userMap">
        <result column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="true_name" property="trueName"/>
        <result column="password" property="password"/>
        <result column="salt" property="salt"/>
        <result column="phone_num" property="phoneNum"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="modify_time" property="modifyTime"/>

        <result column="company_id" property="companyId"/>
        <result column="company_name" property="companyName"/>
        <result column="role_code" property="roleCode"/>
        <result column="role_remark" property="roleRemark"/>
    </resultMap>

    <resultMap id="userPojoMap" type="com.basicit.POJO.UserListPojo" extends="userMap">
        <result column="id" property="id"/>
        <result column="salt" property="salt"/>
        <result column="name" property="companyName"/>
        <result column="company_id" property="companyId"/>

        <result column="role_id" property="roleId"/>
        <result column="code" property="roleCode"/>
        <result column="remark" property="roleRemark"/>
        <result column="name" property="roleName"/>
    </resultMap>

    <insert id="insert" parameterType="com.basicit.model.auth.User">
        insert into t_sys_user (id, create_time, phone_num, last_login_time, modify_time, username, `password`, salt, `status`, true_name)
        values (#{id}, #{createTime}, #{phoneNum}, #{lastLoginTime}, #{modifyTime}, #{username}, #{password}, #{salt}, #{status}, #{trueName})
    </insert>

    <sql id="find_xxx">
	    <![CDATA[
        select u.id,
               u.create_time,
               u.phone_num,
               u.last_login_time,
               u.modify_time,
               u.username,
               u.`password`,
               u.salt,
               u.`status`,
               u.true_name,
               uc.company_id,
               c.name as company_name,
               r.code as role_code,
               r.remark as role_remark
            ]]>
	</sql>

    <sql id="from_xxx">
	    <![CDATA[
        from t_sys_user u
            join t_sys_user_company uc on u.id = uc.user_id
            join t_sys_company c on uc.company_id = c.id
            join t_sys_user_role ur on u.id = ur.user_id
            join t_sys_role r on ur.role_id = r.id
        ]]>
	</sql>

    <sql id="where_xxx">
	    <![CDATA[
        where 1=1
        ]]>
	</sql>

    <select id="findUserByName" parameterType="string" resultMap="userMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <![CDATA[
			where username=#{username}
		]]>
    </select>

    <select id="findUserById" parameterType="string" resultMap="userDTOMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <![CDATA[
			where u.id=#{userId}
		]]>
    </select>

    <select id="findUserById2" parameterType="string" resultMap="userMap">
        select * from t_sys_user where id=#{id}
    </select>

    <select id="findStateById" parameterType="string" resultMap="userMap">
        select status from t_sys_user where id=#{userid}
    </select>

    <select id="findUserByPage" parameterType="string" resultMap="userDTOMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <where>
            <if test="keywords != null and keywords != ''">
                <bind name="pattern" value="'%' + _parameter.keywords + '%'"/>
                true_name like #{pattern}
            </if>
        </where>
        order by create_time desc
    </select>

    <select id="findUserByShop" parameterType="string" resultMap="userMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <![CDATA[
			where organize_id=#{organizeId}
		]]>
    </select>

    <select id="searchUsers" resultMap="userDTOMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <where>
            <if test="searchName != null and searchName != ''">
                <bind name="A" value="'%' + _parameter.searchName + '%'"/>
                u.true_name like #{A}
            </if>
            <if test="searchPhone != null and searchPhone != ''">
                <bind name="B" value="'%' + _parameter.searchPhone + '%'"/>
                and u.phone_num like #{B}
            </if>
            <if test="searchCompany != null and searchCompany != ''">
                <bind name="C" value="'%' + _parameter.searchCompany + '%'"/>
                and uc.company_id like #{C}
            </if>
            <if test="searchRole != null and searchRole != ''">
                <bind name="D" value="'%' + _parameter.searchRole + '%'"/>
                and r.code like #{D}
            </if>
        </where>
        order by create_time desc
    </select>

    <select id="findUserByRoleCode" parameterType="string" resultMap="userMap">
        select u.id,
               u.create_time,
               u.phone_num,
               u.last_login_time,
               u.modify_time,
               u.username,
               u.`password`,
               u.salt,
               u.`status`,
               u.true_name
        from t_sys_user u,
             t_sys_role r,
             t_sys_user_role ur
        where u.id = ur.user_id
          and r.id = ur.role_id
          and r.code = #{roleCode}
    </select>

    <select id="findEmp" parameterType="string" resultMap="userMap">
        <include refid="find_xxx"/>
        <![CDATA[
			from t_sys_user u , t_sys_user_role ur , t_sys_role r
			where u.id=ur.user_id and ur.role_id=r.id
			and r.code=#{roleCode}
			and u.status=#{status}
		]]>
        <if test="shopId != null">
            and u.organize_id=#{shopId}
        </if>
        <if test="empName != null">
            and u.username like '%'||#{empName}||'%'
        </if>
    </select>

    <select id="findUsers" resultMap="userMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
    </select>

    <select id="findSaltById" parameterType="string" resultMap="userMap">
        select id, salt
        from t_sys_user
        where id = #{id}
    </select>

    <select id="findUserByKeywords" parameterType="string" resultMap="userMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <where>
            <if test="keywords != null and keywords != ''">
                <bind name="pattern" value="'%' + _parameter.keywords + '%'"/>
                true_name like #{pattern}
            </if>
        </where>
    </select>

    <update id="update" parameterType="com.basicit.model.auth.User">
        update t_sys_user
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="trueName != null">
                true_name = #{trueName},
            </if>
            <if test="phoneNum != null">
                phone_num = #{phoneNum},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="salt != null">
                salt = #{salt},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime}
            </if>
        </set>
        where u.id = #{id}
    </update>

    <update id="updateByFullId" parameterType="com.basicit.POJO.UserListPojo">
        update t_sys_user u
            join t_sys_user_company uc on u.id = uc.user_id
            join t_sys_company c on uc.company_id = c.id
            join t_sys_user_role ur on u.id = ur.user_id
            join t_sys_role r on ur.role_id = r.id
        <set>
            <if test="username != null">
                u.username = #{username},
            </if>
            <if test="trueName != null">
                u.true_name = #{trueName},
            </if>
            <if test="phoneNum != null">
                u.phone_num = #{phoneNum},
            </if>
            <if test="password != null">
                u.password = #{password},
            </if>
            <if test="salt != null">
                u.salt = #{salt},
            </if>
            <if test="status != null">
                u.status = #{status},
            </if>
            <if test="createTime != null">
                u.create_time = #{createTime},
            </if>
            <if test="lastLoginTime != null">
                u.last_login_time = #{lastLoginTime},
            </if>
            <if test="modifyTime != null">
                u.modify_time = #{modifyTime},
            </if>
            <if test="companyId != null">
                uc.company_id = #{companyId},
            </if>
            <if test="roleCode != null">
                ur.role_id = (select id from t_sys_role where code=#{roleCode})
            </if>
        </set>
        where u.id = #{id}
    </update>

    <update id="updateState" parameterType="com.basicit.model.auth.User">
        update t_sys_user
        set status =
            if ("1" = (select status from (select status from t_sys_user where id=#{userId}) tmp), "0", "1")
        where id = #{userId}
    </update>

    <select id="findAllByFilter" parameterType="Map" resultMap="userMap">
        <include refid="find_xxx"/>
        <include refid="from_xxx"/>
        <include refid="where_xxx"/>
        <if test="start != null and limit != null">
            limit #{start},#{limit}
        </if>
    </select>

    <select id="findAllByFilterCount" parameterType="Map" resultType="int">
        select count(id)
        <include refid="from_xxx"/>
        <include refid="where_xxx"/>
    </select>

    <delete id="delete" parameterType="string">
        delete
        from t_sys_user
        where id = #{id}
    </delete>

</mapper>
